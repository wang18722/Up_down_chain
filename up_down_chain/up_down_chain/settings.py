"""
Django settings for up_down_chain project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)



BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

import sys

sys.path.insert(0, os.path.join(BASE_DIR, 'up_down_chain/app'))

# sys.path.append('app')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xb*eqod0z_%m92yqx6=uki%%n&^%(3bl!i*!ky1m26e)^d5%7h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "haystack",  # 搜索引擎
    'rest_framework',
    "corsheaders",  # 跨域配置
    'django_crontab',  # 定时任务
    "Enterprise.apps.EnterpriseConfig",
    'Pays.apps.PaysConfig',
    'Chainring.apps.ChainringConfig',
    'Users.apps.UsersConfig',
    'Contact.apps.ContactConfig',
    'Subseribe.apps.SubseribeConfig',
    'oauth.apps.OauthConfig',
    'Industry.apps.IndustryConfig',


]

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'up_down_chain.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'up_down_chain/templates/')],  # /home/python/Up_down_chain/up_down_chain
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'up_down_chain.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'NAME': 'up_down_chain',  # 你要存储数据的库名，事先要创建之
        'USER': 'root',  # 数据库用户名
        'PASSWORD': 'mysql',  # 密码
        'HOST': '127.0.0.1',  # 主机
        'PORT': '3306',  # 数据库使用的端口c
    },
    'industry': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'NAME': 'industry',  # 你要存储数据的库名，事先要创建之
        'USER': 'root',  # 数据库用户名
        'PASSWORD': 'mysql',  # 密码
        'HOST': '127.0.0.1',  # 主机
        'PORT': '3306',  # 数据库使用的端口
    }
}

# 配置读写分离
DATABASE_ROUTERS = ['up_down_chain.utils.db_route.MasterSlaveRouter']
# 配置redis数据库

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis:/127.0.0.1/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },

    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "collection": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "wechatpy": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1/5",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# 日志文件配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# 使用自身类去认证
AUTH_USER_MODEL = 'oauth.CustomerInformation'
AUTO_INCREMENT = 1


# 搜索认证 Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.31.73:9200/',  # 此处为elasticsearch运行的服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'task',  # 指定elasticsearch建立的索引库的名称

    },
}
# 添加此项，当数据库改变时，会自动更新索引，非常方便
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

HAYSTACK_SEARCH_RESULT_PER_PAGE = 3



# 添加白名单
CORS_ORIGIN_ALLOW_ALL = True

# 添加白名单
# # CORS
CORS_ORIGIN_WHITELIST = ("*")
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)



# =====================================七牛云url===============================
QINIUYUN_URL = 'http://pso19899q.bkt.clouddn.com/'


# =====================================公众号===============================
# 公众号id
WXAPPID = 'wx326433af14961e48'

# 公众号AppSecret
WXAPPSECRET = '55ea50a326f183f17cf4bc2738121de9'

# 公众号token
Token = '20_VcJAwOyv6lEeZpwJfJlPuEQUCnkiFbWFiJxqq_EXo7_sDBoACRRfptVd-LjpC__kPRBRfhJxlG3Zs-kJHv-PHYtBnt76UussdN773TyE6VyvgkpySmpPpjmSooqY1TKWpcBcwm0Th6wMp9fxFPQdADALVW'

# 公众号回调地址
REDIRECT_URI = 'http://www.shangxialian.net/#/oauth/users'

SCOPE = 'snsapi_userinfo'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

import datetime

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'up_down_chain.utils.users.jwt_response_payload_handler',
}

#保存图片位置
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR,"/home/python/Up_down_chain/up_down_chain")

#=====================================模板推送===============================
TEMPLATE_DICT={
    "1":"2CVQTmuIa6_ZbL2TIegSfh29w68AAmGy4yJZBfYLnW4",
    "2":"2UwZETudvv0bQH3Ghcsw7yjgFGFq03cefU8ZPOWXaCY",
    "3":"Bem1L5JnBKfxlcNNG2Ssf53LACxuc8bM8oBniXiy-is",
    "4":"E4vqitOis_gk974zEvflzTp-CzjnQ82CwilhlkYIoy8",
    "5":"FsJVw9hp3nNM8AVEPJeZUnv3gcQNQ66zncYzgkINE_o",
    "6":"HE03BAqyOIRF0O2NE8E6gb-iGmT6IzuUqWbpptutd40",
    "7":"I9V-chSpkeWWNbHnojm0FfHqUicqHIx7HhT3-W7rL9A",
    "8":"LD-ec9cKzGx6LeO3WFSydV1ZqZfOX_lm4pbtvqznOqg",
    "9":"PPJ_gIHA2hmDO84sMvD3G6Rcbmv7OvSNaOq4h_sqXmQ",
    "10":"URDFvVCggRgA81m3HF421swa4YZ9L3IoBd8CSwg2eQ0",
    "11":"XYVLUBN2sWqY-Wrqz4IakD0pamudTycOqekc806o75w",
    "12":"YRmIvQ_4mygvwgCxuvxEbg8m0EjMwNLGKxUonhZuydE",
    "13":"bjExHYJ7gdC_HzjgHZRCwQLX3TKdYJA1TcCEWWVg7BQ",
    "14":"gsvMwaikBZc-50rOSQG2tho1qqw0cKe-pDFCD9doPso",
    "15":"mGtvfIfQNHXpVxLEkm-B-6WzAicLka_mWoVZuzQHWYk",
    "16":"qxxYZHQ5UAJ6BWcDSTUFvnPovduQmUV9ddhZwPOyQ90",
    "17":"1iT7VrLLQL00KekDlN_xo27fExnioKseBKE9zi3SoHA"
}
TEMPLATE_URL = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token='

print(BASE_DIR)
# 定时任务
CRONJOBS = [
    #五颗星分别代表: 分, 时, 日, 月, 周
    #设置格式 */时间
    # 每一小时执行一次,redis_client.get("access_token").decode()
    ('*/1 * * * *', 'up_down_chain.app.Users.to_access_token.get_access_token', '>> /home/python/Desktop/up_down_chain/logs/crontab.log')
]
